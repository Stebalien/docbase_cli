var searchIndex = {};
searchIndex["docbase_cli"] = {"doc":"","items":[],"paths":[]};
searchIndex["docbase_io"] = {"doc":"","items":[[0,"client","docbase_io","",null,null],[3,"XDocBaseToken","docbase_io::client","",null,null],[12,"0","","",0,null],[3,"Client","","",null,null],[12,"api_key","","",1,null],[11,"new","collections::string","Creates a new empty `String`.",2,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",2,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",2,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",2,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",2,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",2,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",2,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",2,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",2,null],[11,"as_str","","Extracts a string slice containing the entire string.",2,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",2,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",2,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",2,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",2,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",2,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",2,null],[11,"push","","Appends the given `char` to the end of this `String`.",2,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",2,null],[11,"truncate","","Shortens this `String` to the specified length.",2,null],[11,"pop","","Removes the last character from the string buffer and returns it.",2,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",2,null],[11,"insert","","Inserts a character into this `String` at a byte position.",2,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",2,null],[11,"len","","Returns the length of this `String`, in bytes.",2,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",2,null],[11,"clear","","Truncates this `String`, removing all contents.",2,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",2,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",2,null],[11,"clone","collections::binary_heap","",3,null],[11,"clone_from","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",3,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",3,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",3,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",3,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",3,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",3,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",3,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",3,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",3,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",3,null],[11,"push","","Pushes an item onto the binary heap.",3,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",3,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",3,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",3,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",3,null],[11,"len","","Returns the length of the binary heap.",3,null],[11,"is_empty","","Checks if the binary heap is empty.",3,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",3,null],[11,"clear","","Drops all items from the binary heap.",3,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",3,null],[11,"clone","","",4,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next_back","","",4,null],[11,"clone","","",5,null],[11,"next","","",5,null],[11,"size_hint","","",5,null],[11,"next_back","","",5,null],[11,"next","","",6,null],[11,"size_hint","","",6,null],[11,"next_back","","",6,null],[11,"from","","",3,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",3,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",3,null],[11,"extend","","",3,null],[11,"extend","","",3,null],[11,"drop","collections::btree::map","",8,null],[11,"clone","","",8,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",8,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",8,null],[11,"get","","Returns a reference to the value corresponding to the key.",8,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",8,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",8,null],[11,"insert","","Inserts a key-value pair into the map.",8,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",8,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",8,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",8,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",8,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",8,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",8,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next_back","","",9,null],[11,"len","","",9,null],[11,"clone","","",9,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"len","","",10,null],[11,"into_iter","","",8,null],[11,"drop","","",11,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"next_back","","",11,null],[11,"len","","",11,null],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"next_back","","",12,null],[11,"len","","",12,null],[11,"clone","","",12,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"len","","",13,null],[11,"clone","","",13,null],[11,"next","","",14,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"next_back","","",15,null],[11,"len","","",15,null],[11,"next_back","","",14,null],[11,"clone","","",14,null],[11,"next","","",16,null],[11,"next_back","","",16,null],[11,"from_iter","","",8,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",8,null],[11,"extend","","",8,null],[11,"hash","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"fmt","","",8,null],[11,"index","","",8,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",8,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",8,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",8,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",8,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",8,null],[11,"len","","Returns the number of elements in the map.",8,null],[11,"is_empty","","Returns true if the map contains no elements.",8,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",17,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",17,null],[11,"key","","Returns a reference to this entry&#39;s key.",17,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",18,null],[11,"into_key","","Take ownership of the key.",18,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",18,null],[11,"key","","Gets a reference to the key in the entry.",19,null],[11,"remove_pair","","Take ownership of the key and value from the map.",19,null],[11,"get","","Gets a reference to the value in the entry.",19,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",19,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",19,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",19,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",19,null],[11,"partial_cmp","collections::btree::set","",20,null],[11,"lt","","",20,null],[11,"le","","",20,null],[11,"gt","","",20,null],[11,"ge","","",20,null],[11,"cmp","","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"hash","","",20,null],[11,"clone","","",20,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",20,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",20,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",20,null],[11,"difference","","Visits the values representing the difference, in ascending order.",20,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",20,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",20,null],[11,"union","","Visits the values representing the union, in ascending order.",20,null],[11,"len","","Returns the number of elements in the set.",20,null],[11,"is_empty","","Returns true if the set contains no elements.",20,null],[11,"clear","","Clears the set, removing all values.",20,null],[11,"contains","","Returns `true` if the set contains a value.",20,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",20,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",20,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",20,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",20,null],[11,"insert","","Adds a value to the set.",20,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",20,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",20,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",20,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",20,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",20,null],[11,"from_iter","","",20,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",20,null],[11,"extend","","",20,null],[11,"extend","","",20,null],[11,"default","","",20,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",20,null],[11,"clone","","",21,null],[11,"next","","",21,null],[11,"size_hint","","",21,null],[11,"next_back","","",21,null],[11,"len","","",21,null],[11,"next","","",22,null],[11,"size_hint","","",22,null],[11,"next_back","","",22,null],[11,"len","","",22,null],[11,"clone","","",23,null],[11,"next","","",23,null],[11,"next_back","","",23,null],[11,"clone","","",24,null],[11,"next","","",24,null],[11,"size_hint","","",24,null],[11,"clone","","",25,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"clone","","",26,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"clone","","",27,null],[11,"next","","",27,null],[11,"size_hint","","",27,null],[11,"borrow","collections::borrow","",28,null],[11,"clone","","",28,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",28,null],[11,"into_owned","","Extracts the owned data.",28,null],[11,"deref","","",28,null],[11,"cmp","","",28,null],[11,"eq","","",28,null],[11,"partial_cmp","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"hash","","",28,null],[11,"as_ref","","",28,null],[11,"hash","collections::enum_set","",29,null],[11,"cmp","","",29,null],[11,"partial_cmp","","",29,null],[11,"lt","","",29,null],[11,"le","","",29,null],[11,"gt","","",29,null],[11,"ge","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"clone","","",29,null],[11,"fmt","","",29,null],[11,"new","","Returns an empty `EnumSet`.",29,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",29,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",29,null],[11,"clear","","",29,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",29,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",29,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",29,null],[11,"union","","Returns the union of both `EnumSets`.",29,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",29,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",29,null],[11,"remove","","Removes an enum from the EnumSet",29,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",29,null],[11,"iter","","Returns an iterator over an `EnumSet`.",29,null],[11,"sub","","",29,null],[11,"bitor","","",29,null],[11,"bitand","","",29,null],[11,"bitxor","","",29,null],[11,"clone","","",30,null],[11,"next","","",30,null],[11,"size_hint","","",30,null],[11,"from_iter","","",29,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",29,null],[11,"extend","","",29,null],[11,"clone","collections::linked_list","",31,null],[11,"clone","","",32,null],[11,"default","","",33,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",33,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",33,null],[11,"iter","","Provides a forward iterator.",33,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",33,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",33,null],[11,"len","","Returns the length of the `LinkedList`.",33,null],[11,"clear","","Removes all elements from the `LinkedList`.",33,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",33,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",33,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",33,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",33,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",33,null],[11,"push_front","","Adds an element first in the list.",33,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",33,null],[11,"push_back","","Appends an element to the back of a list",33,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",33,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",33,null],[11,"front_place","","Returns a place for insertion at the front of the list.",33,null],[11,"back_place","","Returns a place for insertion at the back of the list.",33,null],[11,"drop","","",33,null],[11,"next","","",31,null],[11,"size_hint","","",31,null],[11,"next_back","","",31,null],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"next_back","","",34,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",34,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",34,null],[11,"next","","",32,null],[11,"size_hint","","",32,null],[11,"next_back","","",32,null],[11,"from_iter","","",33,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",33,null],[11,"extend","","",33,null],[11,"extend","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"partial_cmp","","",33,null],[11,"cmp","","",33,null],[11,"clone","","",33,null],[11,"fmt","","",33,null],[11,"hash","","",33,null],[11,"make_place","","",35,null],[11,"pointer","","",35,null],[11,"finalize","","",35,null],[11,"make_place","","",36,null],[11,"pointer","","",36,null],[11,"finalize","","",36,null],[11,"start","core::ops","",37,null],[11,"end","","",38,null],[11,"start","","",39,null],[11,"end","","",39,null],[11,"borrow","collections::vec","",7,null],[11,"borrow_mut","","",7,null],[11,"clone","collections::str","",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"borrow","collections::string","",2,null],[11,"fmt","core::str::pattern","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"clone","","",41,null],[11,"fmt","","",42,null],[11,"clone","","",42,null],[11,"haystack","","",42,null],[11,"next","","",42,null],[11,"next_match","","",42,null],[11,"next_reject","","",42,null],[11,"next_back","","",42,null],[11,"next_match_back","","",42,null],[11,"next_reject_back","","",42,null],[11,"fmt","","",43,null],[11,"clone","","",43,null],[11,"haystack","","",43,null],[11,"next","","",43,null],[11,"next_match","","",43,null],[11,"next_reject","","",43,null],[11,"next_back","","",43,null],[11,"next_match_back","","",43,null],[11,"next_reject_back","","",43,null],[11,"clone","","",44,null],[11,"fmt","","",44,null],[11,"haystack","","",44,null],[11,"next","","",44,null],[11,"next_match","","",44,null],[11,"next_reject","","",44,null],[11,"next_back","","",44,null],[11,"next_match_back","","",44,null],[11,"next_reject_back","","",44,null],[11,"fmt","","",45,null],[11,"clone","","",45,null],[11,"haystack","","",45,null],[11,"next","","",45,null],[11,"next_match","","",45,null],[11,"next_back","","",45,null],[11,"next_match_back","","",45,null],[11,"cmp","collections::string","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"fmt","","",46,null],[11,"fmt","","",47,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",46,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",46,null],[11,"fmt","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",2,null],[11,"clone_from","","",2,null],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",2,null],[11,"extend","","",2,null],[11,"extend","","",2,null],[11,"extend","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"eq","collections::borrow","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","collections::string","",2,null],[11,"ne","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"hash","","",2,null],[11,"add","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"index_mut","","",2,null],[11,"index_mut","","",2,null],[11,"index_mut","","",2,null],[11,"index_mut","","",2,null],[11,"index_mut","","",2,null],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",48,null],[11,"fmt","","",48,null],[11,"fmt","","",48,null],[11,"eq","","",48,null],[11,"as_ref","","",2,null],[11,"as_ref","","",2,null],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",28,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",28,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",2,null],[11,"write_str","","",2,null],[11,"write_char","","",2,null],[11,"drop","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",7,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",7,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",7,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",7,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",7,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",7,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",7,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",7,null],[11,"as_slice","","Extracts a slice containing the entire vector.",7,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",7,null],[11,"set_len","","Sets the length of a vector.",7,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",7,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",7,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",7,null],[11,"retain","","Retains only the elements specified by the predicate.",7,null],[11,"push","","Appends an element to the back of a collection.",7,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",7,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",7,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",7,null],[11,"clear","","Clears the vector, removing all values.",7,null],[11,"len","","Returns the number of elements in the vector.",7,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",7,null],[11,"split_off","","Splits the collection into two at the given index.",7,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",7,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",7,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",7,null],[11,"clone","","",7,null],[11,"clone_from","","",7,null],[11,"hash","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",7,null],[11,"extend","","",7,null],[11,"extend","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","collections::borrow","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"eq","collections::vec","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,null],[11,"cmp","","",7,null],[11,"drop","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",28,null],[11,"from","","",28,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",28,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",50,null],[11,"size_hint","","",50,null],[11,"count","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",50,null],[11,"drop","","",50,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"drop","","",51,null],[11,"clone","collections::vec_deque","",52,null],[11,"drop","","",52,null],[11,"default","","",52,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",52,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",52,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",52,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",52,null],[11,"swap","","Swaps elements at indices `i` and `j`.",52,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",52,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",52,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",52,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",52,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",52,null],[11,"iter","","Returns a front-to-back iterator.",52,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",52,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",52,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",52,null],[11,"len","","Returns the number of elements in the `VecDeque`.",52,null],[11,"is_empty","","Returns true if the buffer contains no elements",52,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",52,null],[11,"clear","","Clears the buffer, removing all values.",52,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",52,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",52,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",52,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",52,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",52,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",52,null],[11,"push_front","","Inserts an element first in the sequence.",52,null],[11,"push_back","","Appends an element to the back of a buffer",52,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",52,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",52,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",52,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",52,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",52,null],[11,"split_off","","Splits the collection into two at the given index.",52,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",52,null],[11,"retain","","Retains only the elements specified by the predicate.",52,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",52,null],[11,"clone","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next_back","","",53,null],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"next_back","","",54,null],[11,"clone","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"next_back","","",55,null],[11,"drop","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"next_back","","",56,null],[11,"eq","","",52,null],[11,"partial_cmp","","",52,null],[11,"cmp","","",52,null],[11,"hash","","",52,null],[11,"index","","",52,null],[11,"index_mut","","",52,null],[11,"from_iter","","",52,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",52,null],[11,"extend","","",52,null],[11,"extend","","",52,null],[11,"fmt","","",52,null],[11,"from","","",52,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",57,null],[11,"ne","","",57,null],[11,"hash","","",57,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"clone","alloc::boxed","",58,null],[11,"pointer","","",59,null],[11,"make_place","","",59,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",59,null],[11,"finalize","","",60,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",58,null],[11,"drop","","",59,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",60,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",60,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",60,null],[11,"default","","",60,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",60,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",60,null],[11,"clone","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"partial_cmp","","",60,null],[11,"lt","","",60,null],[11,"le","","",60,null],[11,"ge","","",60,null],[11,"gt","","",60,null],[11,"cmp","","",60,null],[11,"hash","","",60,null],[11,"from","","",60,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",60,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",60,null],[11,"fmt","","",60,null],[11,"fmt","","",60,null],[11,"fmt","","",60,null],[11,"deref","","",60,null],[11,"deref_mut","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"call_once","","",60,null],[11,"call_once","","",60,null],[11,"clone","","",60,null],[11,"borrow","","",60,null],[11,"borrow_mut","","",60,null],[11,"as_ref","","",60,null],[11,"as_mut","","",60,null],[11,"eq","docbase_io::client","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"header_name","","",0,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",0,null],[11,"fmt_header","","",0,null],[11,"fmt","","",0,null],[11,"teams","","",1,null],[11,"post_detail","","",1,null],[11,"load_prev_post_search_result","","",1,null],[11,"load_next_post_search_result","","",1,null],[11,"team","","",1,null],[0,"models","docbase_io","",null,null],[0,"comment","docbase_io::models","",null,null],[3,"Comment","docbase_io::models::comment","",null,null],[12,"id","","",61,null],[12,"body","","",61,null],[12,"created_at","","",61,null],[12,"user","","",61,null],[11,"encode","","",61,null],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[0,"post","docbase_io::models","",null,null],[3,"Post","docbase_io::models::post","",null,null],[12,"id","","",62,null],[12,"title","","",62,null],[12,"body","","",62,null],[12,"draft","","",62,null],[12,"url","","",62,null],[12,"created_at","","",62,null],[12,"scope","","",62,null],[12,"groups","","",62,null],[12,"tags","","",62,null],[12,"user","","",62,null],[12,"comments","","",62,null],[11,"encode","","",62,null],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[0,"tag","docbase_io::models","",null,null],[3,"Tag","docbase_io::models::tag","",null,null],[12,"name","","",63,null],[11,"encode","","",63,null],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[0,"user","docbase_io::models","",null,null],[3,"User","docbase_io::models::user","",null,null],[12,"id","","",64,null],[12,"name","","",64,null],[12,"profile_image_url","","",64,null],[11,"encode","","",64,null],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[0,"team","docbase_io::models","",null,null],[3,"Team","docbase_io::models::team","",null,null],[12,"domain","","",65,null],[12,"name","","",65,null],[11,"encode","","",65,null],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[0,"group","docbase_io::models","",null,null],[3,"Group","docbase_io::models::group","",null,null],[12,"id","","",66,null],[12,"name","","",66,null],[11,"encode","","",66,null],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[0,"post_search_result","docbase_io::models","",null,null],[3,"Meta","docbase_io::models::post_search_result","",null,null],[12,"previous_page","","",67,null],[12,"next_page","","",67,null],[12,"total","","",67,null],[3,"PostSearchResult","","",null,null],[12,"posts","","",68,null],[12,"meta","","",68,null],[11,"encode","","",67,null],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,null],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}]],"paths":[[3,"XDocBaseToken"],[3,"Client"],[3,"String"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Comment"],[3,"Post"],[3,"Tag"],[3,"User"],[3,"Team"],[3,"Group"],[3,"Meta"],[3,"PostSearchResult"]]};
initSearch(searchIndex);
